I"e@<h3 id="前言">前言</h3>

<p>前面基本都是接口后端类的测试，这章聊一下web端的http服务如何测试。</p>

<p>我们使用junit测试web的时候不得不起一个完整的服务后调用才能够进入controller代码里面，就如下代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="nd">@RequestMapping</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WarehouseController</span> <span class="o">{</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/web/warehouse/httpDownload"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">httpDownload</span><span class="o">(</span>
    	<span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
       	<span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
       	<span class="nd">@RequestParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"content"</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">""</span><span class="o">)</span> <span class="nc">String</span> <span class="n">content</span><span class="o">,</span>
       	<span class="nd">@RequestParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"downloadToken"</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">""</span><span class="o">)</span> <span class="nc">String</span> <span class="n">downloadToken</span><span class="o">,</span>
       	<span class="nd">@RequestParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"systemCode"</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">""</span><span class="o">)</span> <span class="nc">String</span> <span class="n">systemCode</span><span class="o">)</span> <span class="o">{</span>
       	<span class="c1">//todo...</span>
    <span class="o">}</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/web/warehouse/httpUpload"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">httpUpload</span><span class="o">(</span>
    	<span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
       	<span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"file"</span><span class="o">)</span> <span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
       	<span class="c1">//todo...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@SpringBootTest</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="c1">//由于是Web项目，Junit需要模拟ServletContext，因此我们需要给我们的测试类加上@WebAppConfiguration。</span>
<span class="nd">@WebAppConfiguration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WarehouseControllerTest</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">WebApplicationContext</span> <span class="n">webApplicationContext</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">//指定WebApplicationContext，将会从该上下文获取相应的控制器并得到相应的MockMvc；</span>
        <span class="n">mockMvc</span> <span class="o">=</span> <span class="nc">MockMvcBuilders</span><span class="o">.</span><span class="na">webAppContextSetup</span><span class="o">(</span><span class="n">webApplicationContext</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
  	
  	<span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">httpDownload</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">content</span> <span class="o">=</span> <span class="s">"xxx"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">systemCode</span> <span class="o">=</span> <span class="s">"xxx"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">token</span> <span class="o">=</span> <span class="s">"xxx"</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">MvcResult</span> <span class="n">mvcResult</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="nc">MockMvcRequestBuilders</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/httpDownload"</span><span class="o">)</span>
                    <span class="c1">//contentType参数指定时要注意对应的接受协议类型</span>
                    <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_UTF8</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_UTF8</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">"content"</span><span class="o">,</span> <span class="n">content</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">"systemCode"</span><span class="o">,</span> <span class="n">systemCode</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">"downloadToken"</span><span class="o">,</span> <span class="n">md5</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="nc">MockMvcResultMatchers</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="nc">MockMvcResultHandlers</span><span class="o">.</span><span class="na">print</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">andReturn</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mvcResult</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getContentAsString</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>这时候问题就是如果启动整个web应用非常慢，依赖外部存储资源等又非常多，那么该测试会给我们造成非常大的阻碍。</p>

<h3 id="分片测试法">分片测试法</h3>

<p>所谓分片测试法是指我只让单元测试只模拟启动我所要测试的controller类即可，其他的一概不加载。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.apache.commons.io.FileUtils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mockito.MockitoAnnotations</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.MediaType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.MockMvc</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.MvcResult</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.request.MockMvcRequestBuilders</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.result.MockMvcResultHandlers</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.result.MockMvcResultMatchers</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.setup.MockMvcBuilders</span><span class="o">;</span>
<span class="c1">//注解全部都不用</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WarehouseControllerTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">MockitoAnnotations</span><span class="o">.</span><span class="na">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
      	<span class="c1">//通过MockMvcBuilders.standaloneSetup模拟一个Mvc测试环境，通过build得到一个MockMvc</span>
        <span class="n">mockMvc</span> <span class="o">=</span> <span class="nc">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="k">new</span> <span class="nc">WarehouseController</span><span class="o">()).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
  
  	<span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">httpUpload</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
          	<span class="c1">//第一个参数要和Controller里面的@RequestParam MultipartFile指定名称一致</span>
          	<span class="nc">MockMultipartFile</span> <span class="n">firstFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MockMultipartFile</span><span class="o">(</span><span class="s">"file"</span><span class="o">,</span> 
                    <span class="s">"filename.txt"</span><span class="o">,</span> <span class="s">"text/plain"</span><span class="o">,</span> <span class="s">"some xml"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
            <span class="nc">MvcResult</span> <span class="n">mvcResult</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span>
              	<span class="c1">//调用地址,带文件的方式用multipart</span>
            		<span class="nc">MockMvcRequestBuilders</span><span class="o">.</span><span class="na">multipart</span><span class="o">(</span><span class="s">"/web/warehouse/httpUpload"</span><span class="o">)</span>
                            <span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">firstFile</span><span class="o">)</span>
              	<span class="c1">//一些传输协议参数</span>
              	<span class="c1">//multipart方法里有这个，这里不需要再额外指定.contentType(MediaType.APPLICATION_JSON_UTF8)</span>
              	<span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_UTF8</span><span class="o">)</span>
              	<span class="c1">//body参数</span>
              	<span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">"myBody"</span><span class="o">,</span> <span class="s">"xxxx"</span><span class="o">)</span>
              	<span class="c1">//头信息</span>
              	<span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"myHeader"</span><span class="o">,</span> <span class="s">"{}"</span><span class="o">))</span>
             <span class="c1">//调用接口状态判断，等于一个断言器</span>
             <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="nc">MockMvcResultMatchers</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
             <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="nc">MockMvcResultHandlers</span><span class="o">.</span><span class="na">print</span><span class="o">())</span>
             <span class="o">.</span><span class="na">andReturn</span><span class="o">();</span>
          
          	<span class="c1">//有返回值这里获取</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mvcResult</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getContentAsString</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>以上是测试上传和下载文件的方法，这个个例子涵盖了所有的传参和传参类型，是否有返回值等情况，消息体放body还是header例子都包含了。</p>

<p>而且上传文件也不依赖本地的某个文件指定，直接就能模拟一个文件出来。最重要的是脱离了依赖启动整个web容器。</p>
:ET