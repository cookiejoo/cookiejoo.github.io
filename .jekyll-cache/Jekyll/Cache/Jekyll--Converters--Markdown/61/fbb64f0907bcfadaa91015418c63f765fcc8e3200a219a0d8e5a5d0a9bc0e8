I"i7<h3 id="前言"><strong>前言</strong></h3>

<p>我们在工作中基本都会用到池连接技术，数据库连接池、HTTP连接池、线程池。深入了解其设计思路背后是为了解决频繁开启连接和关闭了解带来的性能开销，合理的复用连接池技术有效的减少创建和消耗带来的内存开销。</p>

<p>今天分享一下线程池的一些原理和示例，让我们更好的理解线程池的工作流程。</p>

<p>一般说线程池的几个核心参数的作用，什么情况下会使用到最大线程数？线程是通过哪个类创建出来的？拒绝策略有哪些？基本上大家都有了解，如当线程数&gt;=核心线程数且任务队列满时就会新建线程数到最大线程数据的范围；如线程是由实现ThreadFactory接口的DefaultThreadFactory去创建线程的，源码中就是new Thread()；当任务队列满时新的任务如何处理就看拒绝策略，默认的AbortPolicy就是抛异常。</p>

<p><img src="/images/2022-01-26-java-thread/image-20220729183831505.png" alt="image-20220729183831505" /></p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>**拒绝策略类型**</th>
      <th>**说明**</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>ThreadPoolExecutor.AbortPolicy</td>
      <td>默认拒绝策略，拒绝任务并抛出任务</td>
    </tr>
    <tr>
      <td>2</td>
      <td>ThreadPoolExecutor.CallerRunsPolicy</td>
      <td>使用调用线程直接运行任务</td>
    </tr>
    <tr>
      <td>3</td>
      <td>ThreadPoolExecutor.DiscardPolicy</td>
      <td>直接拒绝任务，不抛出错误</td>
    </tr>
    <tr>
      <td>4</td>
      <td>ThreadPoolExecutor.DiscardOldestPolicy</td>
      <td>触发拒绝策略，只要还有任务新增，一直会丢弃阻塞队列的最老的任务，并将新的任务加入</td>
    </tr>
  </tbody>
</table>

<p>但是有了上面的了解，你是否知道线程池中的线程创建了多少个线程去执行任务的吗？我相信都不知道吧，我们通过一个实际例子来看一下线程池在一批队列中他的执行时间的变化，得出的一些线程数让我们更直观的感受一下这种参数设置的原理。</p>

<h3 id="示例">示例</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.ArrayBlockingQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadPoolExecutor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span><span class="o">;</span>

<span class="cm">/**
 * @author cookie.joo
 * @date 2022-01-26
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadPoolExecutorTest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">11</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">40</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">41</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">45</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
        <span class="n">execute</span><span class="o">(</span><span class="mi">51</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
     * @param taskCount 任务数
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="kt">int</span> <span class="n">taskCount</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="nc">ThreadPoolExecutor</span> <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadPoolExecutor</span><span class="o">(</span>
                <span class="mi">10</span><span class="o">,</span><span class="c1">//核心线程数</span>
                <span class="mi">20</span><span class="o">,</span><span class="c1">//最大线程数</span>
                <span class="mi">5</span><span class="o">,</span><span class="c1">//非核心回收超时时间</span>
                <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span><span class="c1">//超时时间单位</span>
                <span class="k">new</span> <span class="nc">ArrayBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="mi">30</span><span class="o">)</span><span class="c1">//任务队列</span>
        <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"总任务数："</span> <span class="o">+</span> <span class="n">taskCount</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="c1">//模拟任务提交</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">taskCount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span><span class="c1">//模拟执行耗时</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">});</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">//默认拒绝策略抛异常</span>
                <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">thread</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"任务"</span> <span class="o">+</span> <span class="n">taskCount</span> <span class="o">+</span> <span class="s">"被抛弃"</span><span class="o">);</span>
                <span class="n">taskCount</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">executor</span><span class="o">.</span><span class="na">getCompletedTaskCount</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">taskCount</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"任务总耗时："</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">));</span>
        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/images/2022-01-26-java-thread/image-20220126170100965.png" alt="image-20220126170100965" /></p>

<h3 id="解析">解析</h3>

<p>我们画个表格来对比一下，核心线程数是10，每一个执行耗时500ms，因为main线程启动是要时间的，再加上线程是异常执行的，所以多出来85毫秒或一些啰嗦时间这个可以理解为线程预热。</p>

<ol>
  <li>5个任务或10个任务大概理论500毫秒左右执行完是能理解的；</li>
  <li>从11个任务到30个开始就会多出500~1500毫秒来，是因为任务数没有达到满队列，最大线程数据没有被激活，所以30 \ 10 * 500 = 1500ms；</li>
  <li>当任务数到40个的时候为什么会是两秒呢？这里很多人已经想到了，队列不是30吗？这里40已经满了呀。其实有十个在工作队列已经被取出来执行任务了，所以队列还是能存放30个任务，所以执行玩当前一组10个任务还有30个任务继续分成3组执行，就是4组需要2000ms。</li>
  <li>重点来了。依照第三步所说，这里余下的是31个线程，这回应该要新建线程到20个了吧，如果是20个线程那么10一组另外31个会变成20一组+11一组就是耗时1500ms，然而现实就非我所愿还是2000ms，这是为什么呢？</li>
  <li>45个任务的时候确实是用了20个最大线程数，50个也是，51个由于拒绝策略实际就执行50个任务，这里耗时1500ms也无悬念。45任务（10一组+<strong>20一组+15个一组</strong>）、50任务（10一组+<strong>20一组+20个一组</strong>）就是三组任务耗时1500ms。</li>
</ol>

<p><strong>这里有个公式：</strong></p>

<table>
  <tbody>
    <tr>
      <td>公式①</td>
      <td>任务数 &lt;= 核心线程数</td>
      <td>线程池中工作线程数 = 任务数</td>
    </tr>
    <tr>
      <td>公式②</td>
      <td>核心线程数 &lt; 任务数 &lt;= 最大线程数 + 队列容量时</td>
      <td>线程池中工作线程数 = 核心线程数</td>
    </tr>
    <tr>
      <td>公式③</td>
      <td>核心线程数 + 队列容量 &lt; 任务数 &lt;= 最大线程数 + 队列容量时</td>
      <td>线程池中工作线程数 = 任务数 - 队列容量</td>
    </tr>
  </tbody>
</table>

<p><strong>下列表格换算上面的公式：</strong></p>

<table>
  <thead>
    <tr>
      <th>核心、最大线程数、队列容量</th>
      <th>总任务数</th>
      <th>总耗时(ms)</th>
      <th>公式数据</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>10 、 20 、 30</td>
      <td>5</td>
      <td>585</td>
      <td>① 执行批次为5 =》1 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>10</td>
      <td>504</td>
      <td>① 执行批次为10 =》1 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>11</td>
      <td>1003</td>
      <td>②执行批次为10 + 1 =》2 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>20</td>
      <td>1008</td>
      <td>② 10 + 10 =》2 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>30</td>
      <td>1506</td>
      <td>② 10 + 10 + 10 =》3 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>40</td>
      <td>2011</td>
      <td>② 执行批次为10 + 10 + 10 + 10 =》4 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>41</td>
      <td>2016</td>
      <td>③ 41-30=11，执行批次为11+11+11+8 =》4 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>45</td>
      <td>1514</td>
      <td>③ 45-30=15，执行批次为15+15+15 =》3 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>50</td>
      <td>1512</td>
      <td>③ 50-30=20，执行批次为20+20+10 =》3 * 500</td>
    </tr>
    <tr>
      <td>10 、 20 、 30</td>
      <td>51</td>
      <td>1517</td>
      <td>拒绝了一个任务等同上</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="最后">最后</h3>

<p>遗留一个问题，如果是44个任务，最终的结果是耗时多少秒呢？各位去算一下吧。</p>
:ET